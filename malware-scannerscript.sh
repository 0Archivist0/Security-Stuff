#!/bin/bash

# AUTHOR: Kris Tomplait
# This script utilizes tools and the apt package manager
# This script also was wrote by me so what could go wrong?
# Use at your own risk....


# Function to handle errors
handle_error() {
  local error_message=$1
  echo "Error: $error_message" >&2
  echo "$(date +"%Y-%m-%d %H:%M:%S"): $error_message" >> /var/log/security_scan.log
  exit 1
}

# Check if the script is run with sudo
if [ "$EUID" -ne 0 ]; then
  handle_error "Please run this script with sudo or as the root user."
fi

# Create log file and redirect output and errors
exec > >(tee -a /var/log/security_scan.log) 2>&1

# Define package manager and programs
package_manager="apt"
programs=(clamav rkhunter chkrootkit lynis aide ossec suricata fail2ban tripwire modsecurity)
packages=(clamav clamav-daemon rkhunter chkrootkit lynis aide ossec suricata fail2ban tripwire libapache2-modsecurity)

# Function to install or update a program
install_or_update_program() {
  local program=$1
  local package=$2

  if ! dpkg -l | grep -q "$program"; then
    read -p "Do you want to install $program? (y/n): " install_choice
    if [ "$install_choice" == "y" ]; then
      sudo $package_manager install -y "$package" || handle_error "Failed to install $program"
    else
      echo "Skipping $program installation."
    fi
  else
    read -p "Do you want to update $program? (y/n): " update_choice
    if [ "$update_choice" == "y" ]; then
      sudo $package_manager update && sudo $package_manager upgrade -y || handle_error "Failed to update $program"
    else
      echo "Skipping $program update."
    fi
  fi
}

# Install or update security tools
for ((i=0; i<${#programs[@]}; i++)); do
  install_or_update_program "${programs[i]}" "${packages[i]}"
done

# Check for updated signatures/definitions
for program in "${programs[@]}"; do
  case $program in
    clamav)
      if [ ! -f /var/lib/clamav/db/main.cvd ]; then
        read -p "Updating ClamAV definitions. Press Enter to continue..."
        sudo freshclam || handle_error "Failed to update ClamAV definitions"
      fi
      ;;
    rkhunter)
      if [ ! -f /var/lib/rkhunter/rkhunter.conf ]; then
        read -p "Updating rkhunter configuration. Press Enter to continue..."
        sudo rkhunter --propupd || handle_error "Failed to update rkhunter configuration"
      fi
      ;;
    *)
      # No automatic update for other tools in this script
      echo "Skipping $program update (manual update recommended)";
      ;;
  esac
done

# Interactive selection for running scans
echo "Select programs to run scans:"
for ((i=0; i<${#programs[@]}; i++)); do
  echo "$((i+1)). ${programs[i]}"
done

read -p "Enter numbers separated by space (e.g., '1 2 3'): " scan_choices

# Function to run scans
run_scans() {
  for choice in $scan_choices; do
    index=$((choice-1))
    if [ $index -ge 0 ] && [ $index -lt ${#programs[@]} ]; then
      program="${programs[index]}"
      case $program in
        clamav)
          echo "Running ClamAV scan..."
          sudo clamscan -r /
          ;;
        rkhunter)
          echo "Running rkhunter scan..."
          sudo rkhunter --checkall
          ;;
        chkrootkit)
          echo "Running chkrootkit scan..."
          sudo chkrootkit
          ;;
        lynis)
          echo "Running lynis audit..."
          sudo lynis audit system
          ;;
        aide)
          echo "Running aide scan..."
          sudo aide --check
          ;;
        ossec)
          echo "Running ossec analysis..."
          sudo /var/ossec/bin/ossec-control restart && sudo /var/ossec/bin/ossec-analysisd restart
          ;;
        suricata)
          echo "Running suricata scan..."
          sudo suricata -c /etc/suricata/suricata.yaml -T
          ;;
        fail2ban)
          echo "Running fail2ban scan..."
          sudo fail2ban-client reload
          ;;
        tripwire)
          echo "Running tripwire scan..."
          sudo tripwire --check
          ;;
        modsecurity)
          echo "Running modsecurity scan..."
          sudo service apache2 restart
          ;;
        *)
          echo "Invalid choice: $program"
          ;;
      esac
    else
      echo "Invalid choice: $choice"
    fi
  done
}

# Run scans
read -p "Do you want to run scans? (y/n): " run_scan_choice
if [ "$run_scan_choice" == "y" ]; then
  run_scans
fi

echo "Scan complete, please review scan results for any potential threats."
